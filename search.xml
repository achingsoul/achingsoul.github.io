<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[DOM的增删改查基本操作]]></title>
      <url>https://achingsoul.github.io/2017/04/16/DOM%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="一、什么是DOM"><a href="#一、什么是DOM" class="headerlink" title="一、什么是DOM"></a>一、什么是DOM</h3><p>摘自MDN：</p>
<blockquote>
<p>文档对象模型 (DOM) 是 HTML 和 XML 文档的编程接口。它给文档（结构树）提供了一个结构化的表述并且定义了一种方式—程序可以对结构树进行访问，以改变文档的结构，样式和内容。 DOM 提供了一种表述形式— 将文档作为一个结构化的节点组以及包含属性和方法的对象。从本质上说，它将 web 页面和脚本或编程语言连接起来了。</p>
</blockquote>
<h3 id="二、关于节点"><a href="#二、关于节点" class="headerlink" title="二、关于节点"></a>二、关于节点</h3><p>DOM中有许多不同类型的节点。其中最重要的有三种：<em>元素节点（element node）</em>，<em>文本节点（text node）</em>和<em>属性节点（attribute node）</em>。</p>
<p>例1：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM的增删改查基本操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>什么节点<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"摘自MDN"</span>&gt;</span>balabala<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"节点"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>元素节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>文本节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span>属性节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-元素节点"><a href="#1-元素节点" class="headerlink" title="1. 元素节点"></a>1. 元素节点</h4><p>DOM的原子是<em>元素节点（element node）</em>，标签的名字就是元素的名字。</p>
<p>在例1中，诸如 body、p、ul 之类的元素就是元素节点。</p>
<p>而html是唯一没有包含在其他元素里的唯一元素，它是根元素。</p>
<h4 id="2-文本节点"><a href="#2-文本节点" class="headerlink" title="2. 文本节点"></a>2. 文本节点</h4><p>在例1中，<code>&lt;p&gt;</code>元素包含着的文本“balabala”。它就是一个<em>文本节点（text node）</em>。</p>
<h4 id="3-属性节点"><a href="#3-属性节点" class="headerlink" title="3. 属性节点"></a>3. 属性节点</h4><p>属性节点用来对元素做出更具体的描述。</p>
<p>在例1中，<code>&lt;p title=&quot;摘自MDN&quot;&gt;balabala&lt;/p&gt;</code>  p元素中包含了一个 title 属性，这个属性对包含在元素里的东西进行了描述。</p>
<p>在DOM中，<code>title=&quot;摘自MDN&quot;</code>  是一个<em>属性节点（attribute node）</em>。属性节点总是被包含在元素节点中。并非所有的元素都包含属性，但所有的属性都被元素包含。</p>
<h3 id="三、DOM基本操作（增删改查）"><a href="#三、DOM基本操作（增删改查）" class="headerlink" title="三、DOM基本操作（增删改查）"></a>三、DOM基本操作（增删改查）</h3><h4 id="1-增加元素"><a href="#1-增加元素" class="headerlink" title="1. 增加元素"></a>1. 增加元素</h4><ul>
<li><p>document.createElement() </p>
<p>创建HTML元素</p>
</li>
<li><p>document.createTextNode()</p>
<p>创建文本节点</p>
</li>
<li><p>document.createAttribute()</p>
<p>创建属性节点</p>
</li>
</ul>
<ul>
<li><p>document.write()</p>
<p>写入HTML输出流</p>
</li>
<li><p>document.getElementById(<em>id</em>).onclick = function(){<em>code</em>}</p>
<p>将处理事件的程序代码添加到onclick事件</p>
</li>
<li><p>document.createDocumentFragment()</p>
<p>创建一个新的空的文档片段</p>
</li>
<li><p>element.insertBefore()</p>
<p>添加一个节点到一个参照节点之前</p>
</li>
<li><p>document.appendChild()</p>
<p>将指定的节点添加为调用该方法的节点的最后一个子元素</p>
</li>
</ul>
<h4 id="2-修改元素"><a href="#2-修改元素" class="headerlink" title="2. 修改元素"></a>2. 修改元素</h4><ul>
<li><p>element.innerHTML()</p>
<p>获取或替换HTML元素内容</p>
</li>
<li><p>element.setAttribute(attribute, value)</p>
<p>修改属性节点</p>
</li>
<li><p>document.replaceChild()</p>
<p>使用一个节点替换另一个节点</p>
</li>
<li><p>document.getElementById(<em>id</em>).innerHTML = <em>new HTML</em></p>
<p>更改 HTML 元素的内容</p>
</li>
<li><p>document.getElementById(<em>id</em>).attribute = <em>new value</em></p>
<p>更改HTML元素属性的值</p>
</li>
<li><p>document.getElementById(<em>id</em>).style.property = <em>new style</em> </p>
<p>更改HTML元素的样式</p>
</li>
<li><p>node.nodeValue()</p>
<p>改变文本节点的值</p>
</li>
</ul>
<h4 id="3-查询元素"><a href="#3-查询元素" class="headerlink" title="3. 查询元素"></a>3. 查询元素</h4><ul>
<li><p>document.getElementById()</p>
<p>返回与给定 id 属性值的节点对应的对象</p>
</li>
<li><p>document.getElementsByTagName()</p>
<p>返回一个对象数组，每个对象对应着标签的一个元素</p>
</li>
<li><p>document.getElementsByClassName()</p>
<p>返回指定相同类名的元素的数组</p>
</li>
<li><p>document.getAttribute()</p>
<p>查询属性节点</p>
</li>
<li><p>document.querySelector()</p>
<p>通过CSS选择器来查找元素。返回第一个匹配的元素，如果没有匹配的元素，则返回null</p>
</li>
<li><p>document.querySelectorAll()</p>
<p>通过CSS选择器来查找元素。返回的是所有匹配的元素，而且可以匹配多个选择符</p>
</li>
</ul>
<h4 id="4-删除元素"><a href="#4-删除元素" class="headerlink" title="4. 删除元素"></a>4. 删除元素</h4><ul>
<li><p>document.removeChild()</p>
<p>删除子节点</p>
</li>
</ul>
<p>​</p>
<hr>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul>
<li>《JavaScript DOM编程艺术》</li>
<li><a href="https://www.w3schools.com/js/js_htmldom_methods.asp" target="_blank" rel="external">JS HTML DOM</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的第一个响应式页面]]></title>
      <url>https://achingsoul.github.io/2017/03/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%93%8D%E5%BA%94%E5%BC%8F%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>摘自维基百科：</p>
<blockquote>
<p><strong>响应式网页设计</strong>（英语：Responsive web design，通常缩写为<strong>RWD</strong>），或称自适应网页设计、回应式网页设计、对应式网页设计。 是一种网页设计的技术做法，该设计可使网站在不同的设备（从桌面电脑显示器到移动电话或其他移动产品设备）上浏览时对应不同分辨率皆有适合的呈现，减少用户进行缩放、平移和滚动等操作行为。对于网站设计师和前端工程师来说，有别于过去需要针对各种设备进行不同的设计，使用此种设计方式将更易于维护网页。此概念于2010年5月由国外著名网页设计师Ethan Marcotte所提出。</p>
</blockquote>
<h3 id="二、响应式页面的诞生"><a href="#二、响应式页面的诞生" class="headerlink" title="二、响应式页面的诞生"></a>二、响应式页面的诞生</h3><ol>
<li>设计师给出 PC 设计稿和手机设计稿</li>
<li>前端开发者根据两套设计稿写代码</li>
</ol>
<h3 id="三、编写响应式页面"><a href="#三、编写响应式页面" class="headerlink" title="三、编写响应式页面"></a>三、编写响应式页面</h3><h4 id="1-正交原则"><a href="#1-正交原则" class="headerlink" title="1.正交原则"></a>1.正交原则</h4><p>写 HTML 的时候不考虑 CSS，写 CSS 的时候尽量不要改 HTML，避免逻辑混乱、代码混乱。</p>
<h4 id="2-分模块"><a href="#2-分模块" class="headerlink" title="2.分模块"></a>2.分模块</h4><p>例如CSS中：</p>
<ol>
<li>分模块</li>
<li>把选择器列出</li>
<li>选样式</li>
</ol>
<h4 id="3-尽量不要写「死」宽高"><a href="#3-尽量不要写「死」宽高" class="headerlink" title="3.尽量不要写「死」宽高"></a>3.尽量不要写「死」宽高</h4><p>HTML标签默认自适应，块级元素宽度的默认值就是100%，高度有文档流内的子元素的高度决定。（写死就没有响应式）</p>
<ul>
<li>高度：块级元素可以用<code>padding</code>、<code>line-height</code>来达到预想效果。</li>
</ul>
<ul>
<li>宽度：内联元素使用<code>mix-width</code>，块级元素使用<code>max-width</code>设置。</li>
</ul>
<h4 id="4-优先编写移动端页面"><a href="#4-优先编写移动端页面" class="headerlink" title="4.优先编写移动端页面"></a>4.优先编写移动端页面</h4><p>在我的理解，当下大部分数据流量都来源于移动端，所以优先实现移动端页面，然后再编写其他媒体设备页面。</p>
<h4 id="5-使用CSS媒体查询（Media-Queries）"><a href="#5-使用CSS媒体查询（Media-Queries）" class="headerlink" title="5.使用CSS媒体查询（Media Queries）"></a>5.使用CSS媒体查询<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="external">（Media Queries）</a></h4><p>通过使用<code>@media (判断条件){}</code>来使得在检测不同设备分辨率时，对同一个元素渲染不同的CSS。所以，所有设备的CSS其实可以在同一个文件里，但会根据不同设备来让不同CSS展现出来。</p>
<h4 id="6-使用开发者工具"><a href="#6-使用开发者工具" class="headerlink" title="6.使用开发者工具"></a>6.使用开发者工具</h4><p>利用开发者工具，观察编写CSS时相应的元素状态，再根据需求更改。</p>
<h3 id="四、一个简单的响应式页面"><a href="#四、一个简单的响应式页面" class="headerlink" title="四、一个简单的响应式页面"></a>四、一个简单的响应式页面</h3><p>这是我的第一个简单的响应式页面，兼容<code>PC/PC HD/Mobile/Pad</code>模式。</p>
<p>这个页面还需要完善，关于编写响应式的技巧后续也还会补充。</p>
<p>代码地址：<a href="https://github.com/achingsoul/simple-page/tree/master/Desktop/simple-page" target="_blank" rel="external">https://github.com/achingsoul/simple-page/tree/master/Desktop/simple-page</a></p>
<p>预览地址：<a href="https://achingsoul.github.io/simple-page/Desktop/simple-page/index.html">https://achingsoul.github.io/simple-page/Desktop/simple-page/index.html</a></p>
<h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><ol>
<li>要先理解整体页面各模块需求，才能更好的进行编写。</li>
<li>下一步要对响应式页面中遇到的居中问题进行梳理。</li>
<li>关于flexbox布局要多加练习。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 响应式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML中的meta元素]]></title>
      <url>https://achingsoul.github.io/2017/03/26/HTML%E4%B8%AD%E7%9A%84meta%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>HTML中的meta元素表示那些不能由其它HTML元相关元素，如title，base，link，style和scipt元素之一表示的任何元数据信息。详情参考<a href="https://www.w3.org/TR/html5/document-metadata.html#the-meta-element" target="_blank" rel="external">4.2 Document metadata – HTML5</a>。</p>
<h3 id="二、属性"><a href="#二、属性" class="headerlink" title="二、属性"></a>二、属性</h3><h4 id="1-name属性"><a href="#1-name属性" class="headerlink" title="1.name属性"></a>1.name属性</h4><p>name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p>
<p>meta标签的name属性语法格式是：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"参数"</span> <span class="attr">content</span>=<span class="string">"具体的参数值"</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>页面关键字</strong></p>
<p>每个网页应具有描述该网页内容的一组唯一的关键字。<br>使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"壁纸 音乐 电影 吉他"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>页面描述</strong></p>
<p>页面描述，每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"网站描述"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>搜索引擎索引方式</strong></p>
<p>有时候会有一些站点内容，不希望被ROBOTS抓取而公开。为了解决这个问题，ROBOTS开发界提供了两个办法：一个是robots.txt，另一个是The Robots META标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Robots"</span> <span class="attr">contect</span>=<span class="string">"all|none|index|noindex|follow|nofollow"</span>&gt;</span>  </div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">默认是all其中的属性说明如下： </div><div class="line">设定为all：文件将被检索，且页面上的链接可以被查询； </div><div class="line">设定为none：文件将不被检索，且页面上的链接不可以被查询； </div><div class="line">设定为index：文件将被检索； </div><div class="line">设定为follow：页面上的链接可以被查询； </div><div class="line">设定为noindex：文件将不被检索，但页面上的链接可以被查询； </div><div class="line">设定为nofollow：文件将不被检索，页面上的链接可以被查询。</div><div class="line">--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>声明作者</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"author name"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>浏览器内核选择</strong></p>
<p>国内浏览器很多都是双内核（webkit和Trident），webkit内核高速浏览，IE内核兼容网页和旧版网站。而添加meta标签的网站可以控制浏览器选择何种内核渲染。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit|ie-comp|ie-stand"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-http-equiv属性"><a href="#2-http-equiv属性" class="headerlink" title="2.http-equiv属性"></a>2.http-equiv属性</h3><p>http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。</p>
<p>meta标签的http-equiv属性语法格式是：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"参数"</span> <span class="attr">content</span>=<span class="string">"参数变量值"</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>优先使用 IE 最新版本和 Chrome</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 关于X-UA-Compatible --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=6"</span> &gt;</span><span class="comment">&lt;!-- 使用IE6 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=7"</span> &gt;</span><span class="comment">&lt;!-- 使用IE7 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=8"</span> &gt;</span><span class="comment">&lt;!-- 使用IE8 --&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>页面重定向和刷新</strong></p>
<p>content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;url="</span> "&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>设定期限</strong></p>
<p>可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Fri,12Jan200118:18:18GMT"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>Pragma(cache模式)</strong></p>
<p>禁止浏览器从本地计算机的缓存中访问页面内容。这样设定，访问者将无法脱机浏览。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>自动刷新并指向新页面</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"2;URL=http://www.xxx.net"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2是指停留2秒钟后自动刷新到URL网址。</p>
</li>
<li><p><strong>Set-Cookie(cookie设定)</strong></p>
<p>如果网页过期，那么存盘的cookie将被删除。<br>用法（必须使用GMT时间格式）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Set-Cookie"</span> <span class="attr">content</span>=<span class="string">"cookievalue=xxx;expires=Friday,12-Jan-200118:18:18GMT; path=/"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>设定显示的语言</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Language"</span> <span class="attr">content</span>=<span class="string">"zh-cn"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-特殊"><a href="#3-特殊" class="headerlink" title="3.特殊"></a>3.特殊</h3><ul>
<li><p><strong>声明编码H5最新写法</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> meta </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符集与字符编码]]></title>
      <url>https://achingsoul.github.io/2017/03/26/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>学习之初，对字符编码概念及原理不够理解，本文用于整理记录关于字符编码的知识。</p>
<h3 id="二、基础概念"><a href="#二、基础概念" class="headerlink" title="二、基础概念"></a>二、基础概念</h3><p>要弄清字符编码，首先需要知道什么是字符集。从名字来知道字符集就是所有字符构成的集合。<br>以下摘自维基百科：</p>
<blockquote>
<p><strong>字符</strong>是各种文字和符号的总称，包括各个国家文字、标点符号、图形符号、数字等等。<br><strong>字符集</strong>是多个字符的集合。字符集种类很多，常见的字符集有：ASCII、GBK、Unicode、BIG5等<br><strong>字符编码</strong>（英语：Character encoding）也称字集码，是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。</p>
</blockquote>
<h3 id="三、常见的字符编码"><a href="#三、常见的字符编码" class="headerlink" title="三、常见的字符编码"></a>三、常见的字符编码</h3><h4 id="1-ASCII"><a href="#1-ASCII" class="headerlink" title="1.ASCII"></a>1.ASCII</h4><p>计算机最早由老外发明，因此最早的ASCII编码只考虑到了英文字母的表示，</p>
<ul>
<li>字符集：英文字母、数字、标点、控制字符（回车，制表符等）</li>
<li>编码集：由于这些字符数量有限，它的编码集也很小，只需要0-127的整数就可以表示</li>
<li>编码方案：存储这些编码也很简单，只需要一个字节，即将字符的编码直接转化为一个字节的二进制数据即可<br>比如字符A的编码值为65，二进制存储为01000001<h4 id="2-GBK"><a href="#2-GBK" class="headerlink" title="2.GBK"></a>2.GBK</h4>中文博大精深，中文字符也远远多于英文字符，这样长度只有一个字节的ascii编码就无法表示数量庞大的中文字符，于是就有了gb系列的编码，其中gbk是gb系列编码的扩展</li>
<li>字符集：ascii字符＋中文</li>
<li>编码集：每个字符用两个字节表示，编码集为0-65535（没有完全覆盖），理论上最多可以表示65536个字符，这可以表示绝大多数汉字</li>
<li>编码方案：ascii字符保持不变，用一个字节表示，中文字符用两个字节表示，第一字节的范围是81–FE，第二字节的一部分领域在40–7E，其他领域在80–FE<br>比如“中”编码值为54992，十六进制为0xD6D0。GBK兼容ascii编码，事实上所有编码都兼容ascii编码。另外微软的CP936编码被视为等同于GBK<h4 id="3-Unicode"><a href="#3-Unicode" class="headerlink" title="3.Unicode"></a>3.Unicode</h4>中文的编码是解决了，但是其它语言的编码怎么办呢，总不能每个国家都搞一套编码方案吧，而且在互联网时代，很多信息都是共享的，于是需要一种能表示所有字符的编码方案，Unicode就是这样的</li>
<li>字符集：所有语言的所有字符</li>
<li>编码集：unicode是一个很大的集合，可以表示100多万个符号，最长可用4个字节表示一个符号</li>
<li>编码方案：unicode只是规定了每个符号的二进制表示，并没有规定如何存储<br>比如“中”的Unicode编码为十六进制0x4E2D，需要用两个字节来表示，有些字符可能需要3个甚至4个字节来表示，如果都采用定长编码，就会造成存储空间的极大浪费，因为我们知道英文字符只需要一个字节就能表示，于是便有了对Unicode的不同实现方案，目前最广泛使用的就是UTF-8<h4 id="4-UTF-8"><a href="#4-UTF-8" class="headerlink" title="4.UTF-8"></a>4.UTF-8</h4>UTF-8是对Unicode的一种实现方案，是一种可变长字符编码，也就是说它先基于Unicode编码将字符表示成一个二进制，然后采用一种方式去存储这串二进制，它的规则也很简单</li>
<li><p>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的Unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的</p>
</li>
<li><p>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的Unicode码<br>具体编码规则如下</p>
<p><img src="http://i2.buimg.com/1949/351e41a4022bd2b6.png" alt="Markdown"></p>
</li>
</ul>
<p>举个例子，字符A的Unicode值为01000001，其UTF-8编码仍旧为01000001，汉字“中”的Unicode编码为0x4E2D(01001110 00101101)，在第三行的范围内，需要用三个字节表示，其UTF-8编码值格式为1110xxxx 10xxxxxx 10xxxxxx，其中x为从最右边开始填入的unicode编码二进制，不够的补0，得到11100100 10111000 10101101</p>
<p>UTF-8有两个主要优点，第一是变长编码，在能表示足够大的字符集的前提下减少了存储空间，第二是采用前缀编码，即任何一个字符的编码都不是另一个字符编码的前缀，这样的好处是在网络传输过程中如果丢失了一个字节，可以判断出这个字节所在字符的编码边界，只会影响这个字符的显示，而不会影响其后面的字符，这不同于GBK这种非前缀编码，GBK每个汉字用两个字节编码，如果丢失一个字节，剩下的一个字节和后面字符的第一个字节可以组成一个新的字符，这样后续的所有字符都错乱了。</p>
]]></content>
      
        <categories>
            
            <category> HTTP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 字符集 </tag>
            
            <tag> 字符编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何使用 GitHub Pages 预览页面]]></title>
      <url>https://achingsoul.github.io/2017/03/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-GitHub-Pages-%E9%A2%84%E8%A7%88%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<p>为了能预览GitHub上的页面，GitHub推出了 GitHub Pages 功能，以下是设置GitHub Pages的步骤： </p>
<h2 id="1-登入GitHub，点击New-repository"><a href="#1-登入GitHub，点击New-repository" class="headerlink" title="1.登入GitHub，点击New repository"></a>1.登入GitHub，点击New repository</h2><p><img src="http://upload-images.jianshu.io/upload_images/4730821-71a348b1fde9f019.png?imageMogr2/auto-orient/strip" alt=""></p>
<h2 id="2-点击Create-repository"><a href="#2-点击Create-repository" class="headerlink" title="2.点击Create repository"></a>2.点击Create repository</h2><p><img src="http://upload-images.jianshu.io/upload_images/4730821-5ce8e7d51934b1bb.png?imageMogr2/auto-orient/strip" alt=""></p>
<h2 id="3-进入「settings」页面："><a href="#3-进入「settings」页面：" class="headerlink" title="3.进入「settings」页面："></a>3.进入「settings」页面：</h2><p><img src="http://upload-images.jianshu.io/upload_images/4730821-fef2cb519964845f.png?imageMogr2/auto-orient/strip" alt=""></p>
<h2 id="4-开启-GitHub-Pages-功能，得到一个「预览地址」，我的「预览地址」是-https-achingsoul-github-io-demos"><a href="#4-开启-GitHub-Pages-功能，得到一个「预览地址」，我的「预览地址」是-https-achingsoul-github-io-demos" class="headerlink" title="4.开启 GitHub Pages 功能，得到一个「预览地址」，我的「预览地址」是 https://achingsoul.github.io/demos/"></a>4.开启 GitHub Pages 功能，得到一个「预览地址」，我的「预览地址」是 <a href="https://achingsoul.github.io/demos/">https://achingsoul.github.io/demos/</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/4730821-fef2cb519964845f.png?imageMogr2/auto-orient/strip" alt=""></p>
<h2 id="5-以后你就用这个「预览地址」来预览你的-html，比如你的-html-路径是-demos-test-html，那么预览链接就是："><a href="#5-以后你就用这个「预览地址」来预览你的-html，比如你的-html-路径是-demos-test-html，那么预览链接就是：" class="headerlink" title="5.以后你就用这个「预览地址」来预览你的 html，比如你的 html 路径是 demos/test.html，那么预览链接就是："></a>5.以后你就用这个「预览地址」来预览你的 html，比如你的 html 路径是 demos/test.html，那么预览链接就是：</h2><p><a href="https://achingsoul.github.io/demos/test.html">https://achingsoul.github.io/demos/test.html</a></p>
<h3 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h3><ul>
<li>新建test.html</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4730821-4760c096c4f82d90.png?imageMogr2/auto-orient/strip" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4730821-916810aeedd24fc5.png?imageMogr2/auto-orient/strip" alt=""></p>
<ul>
<li>在浏览器输入<a href="https://achingsoul.github.io/demos/test.html">https://achingsoul.github.io/demos/test.html</a></li>
</ul>
<p>这样，你就能自己随时预览 GitHub 里的页面了！</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
