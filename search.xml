<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>https://achingsoul.github.io/2017/10/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h1><h2 id="1-1-冒泡排序（Bubble-Sort）的概念"><a href="#1-1-冒泡排序（Bubble-Sort）的概念" class="headerlink" title="1.1 冒泡排序（Bubble Sort）的概念"></a>1.1 冒泡排序（Bubble Sort）的概念</h2><blockquote>
<ol>
<li>依次比较相邻的两个数，如果不符合排序规则，则调换两个数的位置。这样一遍比较下来，能够保证最大（或最小）的数排在最后一位。</li>
<li>再对最后一位以外的数组，重复前面的过程，直至全部排序完成。</li>
</ol>
</blockquote>
<p>以对数组<code>[3, 2, 4, 5, 1]</code>进行从小到大排序为例，步骤如下：</p>
<blockquote>
<ol>
<li>第一位的“3”与第二位的“2”进行比较，3大于2，互换位置，数组变成<code>[2, 3, 4, 5, 1]</code>。</li>
<li>第二位的“3”与第三位的“4”进行比较，3小于4，数组不变。</li>
<li>第三位的“4”与第四位的“5”进行比较，4小于5，数组不变。</li>
<li>第四位的“5”与第五位的“1”进行比较，5大于1，互换位置，数组变成<code>[2, 3, 4, 1, 5]</code>。</li>
</ol>
</blockquote>
<p>第一轮排序完成，可以看到最后一位的5，已经是正确的数了。然后，再对剩下的数<code>[2, 3, 4, 1]</code>重复这个过程，每一轮都会在本轮最后一位上出现正确的数。直至剩下最后一个位置，所有排序结束。</p>
<h2 id="1-2-算法实现"><a href="#1-2-算法实现" class="headerlink" title="1.2 算法实现"></a>1.2 算法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先定义一个交换函数，作用是交换两个位置的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">myArray, p1, p2</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> temp = myArray[p1]</div><div class="line">  myArray[p1] = myArray[p2]</div><div class="line">  myArray[p2] = temp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//然后定义主函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">myArray</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> len = myArray.length</div><div class="line">  <span class="keyword">var</span> i</div><div class="line">  <span class="keyword">var</span> j</div><div class="line">  <span class="keyword">var</span> stop</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)&#123; <span class="comment">// 比较多少趟，从第一趟开始</span></div><div class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>, stop=len<span class="number">-1</span>-i; j&lt;stop; j++)&#123; <span class="comment">// 每一趟比较多少次数</span></div><div class="line">      <span class="keyword">if</span>(myArray[j] &gt; myArray[j+<span class="number">1</span>])&#123;</div><div class="line">        swap(myArray, j, j+<span class="number">1</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> myArray</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArray = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</div><div class="line"><span class="keyword">var</span> result = bubbleSort(myArray)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result)</div></pre></td></tr></table></figure>
<h1 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h1><h2 id="2-1-选择排序（Selection-Sort）的概念"><a href="#2-1-选择排序（Selection-Sort）的概念" class="headerlink" title="2.1 选择排序（Selection Sort）的概念"></a>2.1 选择排序（Selection Sort）的概念</h2><blockquote>
<p>选择排序（Selection Sort）与冒泡排序类似，也是依次对相邻的数进行两两比较。不同之处在于，它不是每比较一次就调换位置，而是一轮比较完毕，找到最大值（或最小值）之后，将其放在正确的位置，其他数的位置不变。</p>
</blockquote>
<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>
<blockquote>
<ol>
<li>假定第一位的“3”是最小值。</li>
<li>最小值“3”与第二位的“2”进行比较，2小于3，所以新的最小值是第二位的“2”。</li>
<li>最小值“2”与第三位的“4”进行比较，2小于4，最小值不变。</li>
<li>最小值“2”与第四位的“5”进行比较，2小于5，最小值不变。</li>
<li>最小值“2”与第五位的“1”进行比较，1小于2，所以新的最小值是第五位的“1”。</li>
<li>第五位的“1”与第一位的“3”互换位置，数组变为[1, 2, 4, 5, 3]。</li>
</ol>
</blockquote>
<p>这一轮比较结束后，最小值“1”已经排到正确的位置了，然后对剩下的[2, 4, 5, 3]重复上面的过程。每一轮排序都会将该轮的最小值排到正确的位置，直至剩下最后一个位置，所有排序结束。</p>
<h2 id="2-2-算法实现"><a href="#2-2-算法实现" class="headerlink" title="2.2 算法实现"></a>2.2 算法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先定义一个交换函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">myArray, p1, p2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> temp = myArray[p1]</div><div class="line">    myArray[p1] = myArray[p2]</div><div class="line">    myArray[p2] = temp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 再定义主函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">myArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> len = myArray.length</div><div class="line">    <span class="keyword">var</span> min</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 将当前位置设为最小值</span></div><div class="line">        min = i</div><div class="line"></div><div class="line">        <span class="comment">// 检查数组其余部分是否更小</span></div><div class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>; j&lt;len; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(myArray[j] &lt; myArray[min])&#123;</div><div class="line">                min = j</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 如果当前位置不是最小值，则将其换为最小值</span></div><div class="line">        <span class="keyword">if</span>(i != min)&#123;</div><div class="line">            swap(myArray, i , min)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> myArray</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArray = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</div><div class="line"><span class="keyword">var</span> result = selectionSort(myArray)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result)</div></pre></td></tr></table></figure>
<h1 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h1><h2 id="3-1-插入排序（Insertion-Sort）的概念"><a href="#3-1-插入排序（Insertion-Sort）的概念" class="headerlink" title="3.1 插入排序（Insertion Sort）的概念"></a>3.1 插入排序（Insertion Sort）的概念</h2><blockquote>
<p>插入排序（insertion sort）比前面两种排序方法都更有效率。它将数组分成“已排序”和“未排序”两部分，一开始的时候，“已排序”的部分只有一个元素，然后将它后面一个元素从“未排序”部分插入“已排序”部分，从而“已排序”部分增加一个元素，“未排序”部分减少一个元素。以此类推，完成全部排序。</p>
</blockquote>
<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>
<blockquote>
<ol>
<li>将数组分成[3]和[2, 4, 5, 1]两部分，前者是已排序的，后者是未排序的。</li>
<li>取出未排序部分的第一个元素“2”，与已排序部分最后一个元素“3”比较，因为2小于3，所以2排在3前面，整个数组变成[2, 3]和[4, 5, 1]两部分。</li>
<li>取出未排序部分的第一个元素“4”，与已排序部分最后一个元素“3”比较，因为4大于3，所以4排在3后面，整个数组变成[2, 3, 4]和[5, 1]两部分。</li>
<li>取出未排序部分的第一个元素“5”，与已排序部分最后一个元素“4”比较，因为5大于4，所以5排在4后面，整个数组变成[2, 3, 4, 5]和[1]两部分。</li>
<li>取出未排序部分的第一个元素“1”，与已排序部分最后一个元素“5”比较，因为1小于5，所以再与前一个元素“4”比较；因为1小于4，再与前一个元素“3”比较；因为1小于3，再与前一个元素“2”比较；因为小于1小于2，所以“1”排在2的前面，整个数组变成[1, 2, 3, 4, 5]。</li>
</ol>
</blockquote>
<h2 id="3-2-算法实现"><a href="#3-2-算法实现" class="headerlink" title="3.2 算法实现"></a>3.2 算法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">myArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> len = myArray.length, <span class="comment">// 数组的长度</span></div><div class="line">        value,                <span class="comment">// 当前比较的值</span></div><div class="line">        i,                    <span class="comment">// 未排序部分的当前位置</span></div><div class="line">        j;                    <span class="comment">// 已排序部分的当前位置</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">        <span class="comment">// 储存当前位置的值</span></div><div class="line">        value = myArray[i]</div><div class="line"></div><div class="line">        <span class="comment">// 当已排序部分的当前元素大于value，就将当前元素向后移一位，再将前一位与value比较</span></div><div class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>; j&gt;<span class="number">-1</span> &amp;&amp; myArray[j]&gt;value; j--)&#123;</div><div class="line">            myArray[j+<span class="number">1</span>] = myArray[j]</div><div class="line">        &#125;</div><div class="line">        myArray[j+<span class="number">1</span>] = value</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> myArray</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArray = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</div><div class="line"><span class="keyword">var</span> result = insertionSort(myArray)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result)</div></pre></td></tr></table></figure>
<h4 id="以上三种排序，因为效率低，很少实际使用。"><a href="#以上三种排序，因为效率低，很少实际使用。" class="headerlink" title="以上三种排序，因为效率低，很少实际使用。"></a>以上三种排序，因为效率低，很少实际使用。</h4><h1 id="4-合并排序"><a href="#4-合并排序" class="headerlink" title="4. 合并排序"></a>4. 合并排序</h1><h2 id="4-1-合并排序（Merge-Sort）的概念"><a href="#4-1-合并排序（Merge-Sort）的概念" class="headerlink" title="4.1 合并排序（Merge Sort）的概念"></a>4.1 合并排序（Merge Sort）的概念</h2><blockquote>
<p>将两个已经排序的数组合并，要比从头开始排序所有元素来得快。因此，可以将数组拆开，分成n个只有一个元素的数组，然后不断地两两合并，直到全部排序完成。</p>
</blockquote>
<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>
<blockquote>
<ol>
<li>将数组分成[3, 2, 4]和[5, 1]两部分。</li>
<li>将[3, 2, 4]分成[3, 2]和[4]=两部分。</li>
<li>将[3, 2]分成[3]和[2]两部分，然后合并成[2, 3]。</li>
<li>将[2, 3]和[4]合并成[2, 3, 4]。</li>
<li>将[5, 1]分成[5]和[1]两部分，然后合并成[1, 5]。</li>
<li>将[2, 3, 4]和[1, 5]合并成[1, 2, 3, 4, 5]。</li>
</ol>
</blockquote>
<h2 id="4-2-算法实现"><a href="#4-2-算法实现" class="headerlink" title="4.2 算法实现"></a>4.2 算法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// merge函数，合并两个已经按升序排好序的数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result  = [],</div><div class="line">        il      = <span class="number">0</span>,</div><div class="line">        ir      = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//比较两个数组的第一个元素，将其中较小的一个放入result数组；然后，将其中较大的一个与另一个数组的第二个元素进行比较，再将其中较小的一个放入result数组的第二个位置。</span></div><div class="line">    <span class="comment">//以此类推，直到一个数组的所有元素都进入result数组为止，再将另一个数组剩下的元素接着result数组后面返回</span></div><div class="line">    <span class="keyword">while</span> (il &lt; left.length &amp;&amp; ir &lt; right.length)&#123;</div><div class="line">        <span class="keyword">if</span> (left[il] &lt; right[ir])&#123;</div><div class="line">            result.push(left[il++]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result.push(right[ir++]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result.concat(left.slice(il)).concat(right.slice(ir));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">myArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (myArray.length &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> myArray;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="comment">// Math.floor() 返回小于或等于一个给定数字的最大整数</span></div><div class="line">    <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(myArray.length / <span class="number">2</span>), </div><div class="line">        <span class="comment">// .slice(start,[end])根据指定的下标范围，过滤匹配的元素集合，并生成新的 jQuery 对象</span></div><div class="line">        left    = myArray.slice(<span class="number">0</span>, middle), </div><div class="line">        right   = myArray.slice(middle),</div><div class="line">        params = merge(mergeSort(left), mergeSort(right));</div><div class="line">    </div><div class="line">    <span class="comment">// 在返回的数组头部，添加两个元素，第一个是0，第二个是返回的数组长度</span></div><div class="line">    params.unshift(<span class="number">0</span>, myArray.length);</div><div class="line"></div><div class="line">	<span class="comment">// splice用来替换数组元素，它接受多个参数，</span></div><div class="line">	<span class="comment">// 第一个是开始替换的位置，第二个是需要替换的个数，后面就是所有新加入的元素。</span></div><div class="line">	<span class="comment">// 因为splice不接受数组作为参数，所以采用apply的写法。</span></div><div class="line">	<span class="comment">// 这一句的意思就是原来的myArray数组替换成排序后的myArray</span></div><div class="line">    myArray.splice.apply(myArray, params);</div><div class="line"></div><div class="line">	<span class="comment">// 返回排序后的数组</span></div><div class="line">    <span class="keyword">return</span> myArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArray = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</div><div class="line"><span class="keyword">var</span> s = mergeSort(myArray)</div><div class="line"><span class="built_in">console</span>.log(s)</div></pre></td></tr></table></figure>
<h1 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5. 快速排序"></a>5. 快速排序</h1><h2 id="5-1-快速排序（Quick-Sort）的概念"><a href="#5-1-快速排序（Quick-Sort）的概念" class="headerlink" title="5.1 快速排序（Quick Sort）的概念"></a>5.1 快速排序（Quick Sort）的概念</h2><blockquote>
<p>快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。</p>
<p>它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。</p>
</blockquote>
<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>
<blockquote>
<ol>
<li>选择中间值“4”作为“支点”。</li>
<li>第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。</li>
<li>倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。</li>
<li>左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。</li>
<li>左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。</li>
<li>右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。</li>
<li>左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。</li>
<li>对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。</li>
</ol>
</blockquote>
<h2 id="5-2-算法实现"><a href="#5-2-算法实现" class="headerlink" title="5.2 算法实现"></a>5.2 算法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先部署swap函数，用于互换两个位置的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">myArray, firstIndex, secondIndex</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> temp = myArray[firstIndex]</div><div class="line">    myArray[firstIndex] = myArray[secondIndex]</div><div class="line">    myArray[secondIndex] = temp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 然后部署一个partition函数，用于完成一轮排序</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">myArray, left, right</span>)</span>&#123;</div><div class="line">    <span class="comment">// 确定支点</span></div><div class="line">    <span class="keyword">var</span> pivot = myArray[<span class="built_in">Math</span>.floor((right+left)/<span class="number">2</span>)],</div><div class="line">        i = left, j= right;</div><div class="line">    <span class="keyword">while</span>(i &lt;= j)&#123;</div><div class="line">        <span class="keyword">while</span>(myArray[i] &lt; pivot)&#123;</div><div class="line">            i++</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(myArray[j] &gt; pivot)&#123;</div><div class="line">            j--</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i &lt;= j)&#123;</div><div class="line">            swap(myArray, i, j)</div><div class="line">            i++</div><div class="line">            j--</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 接下来，就是递归上面的过程，完成整个排序</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">myArray, left, right</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(myArray.length &lt; <span class="number">2</span>) <span class="keyword">return</span> myArray</div><div class="line">    left = (<span class="keyword">typeof</span> left !== <span class="string">"number"</span> ? <span class="number">0</span> : left)</div><div class="line">    right = (<span class="keyword">typeof</span> right !== <span class="string">"number"</span> ? myArray.length<span class="number">-1</span> :right)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> index = partition(myArray, left, right)</div><div class="line">    <span class="keyword">if</span>(left &lt; index<span class="number">-1</span>)&#123;</div><div class="line">        quickSort(myArray, left, index<span class="number">-1</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(index &lt; right)&#123;</div><div class="line">        quickSort(myArray, index, right)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> myArray</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArray = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</div><div class="line"><span class="keyword">var</span> s = quickSort(myArray)</div><div class="line"><span class="built_in">console</span>.log(s)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flexbox 属性整理]]></title>
      <url>https://achingsoul.github.io/2017/10/02/flexbox%20%E5%B1%9E%E6%80%A7%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>以前收藏的两个网站，对于学习 Flexbox 比较轻松易懂，多玩几次就会了，顺便整理一下属性和取值，方便自己复习。</p>
<p>网站一：<a href="http://flexboxfroggy.com/#zh-cn" target="_blank" rel="external">http://flexboxfroggy.com/#zh-cn</a>        网站二：<a href="http://www.flexboxdefense.com/" target="_blank" rel="external">http://www.flexboxdefense.com/</a></p>
<h1 id="Flexbox属性整理"><a href="#Flexbox属性整理" class="headerlink" title="Flexbox属性整理"></a>Flexbox属性整理</h1><blockquote>
<p>注意当flex以列为方向时，<code>justify-content</code> 控制纵向对齐，<code>align-items</code> 控制横向对齐。</p>
</blockquote>
<h3 id="justify-content-水平对齐元素"><a href="#justify-content-水平对齐元素" class="headerlink" title="justify-content  水平对齐元素"></a>justify-content  水平对齐元素</h3><ul>
<li><code>flex-start</code>: 元素和容器的左端对齐。</li>
<li><code>flex-end</code>: 元素和容器的右端对齐。</li>
<li><code>center</code>: 元素在容器里居中。</li>
<li><code>space-between</code>:元素之间保持相等的距离。</li>
<li><code>space-around</code>:元素周围保持相等的距离。</li>
</ul>
<h3 id="align-items-纵向对齐元素"><a href="#align-items-纵向对齐元素" class="headerlink" title="align-items  纵向对齐元素"></a>align-items  纵向对齐元素</h3><h3 id="align-self-控制单个元素属性"><a href="#align-self-控制单个元素属性" class="headerlink" title="align-self  控制单个元素属性"></a>align-self  控制单个元素属性</h3><ul>
<li><code>flex-start</code>: 元素与容器的顶部对齐。</li>
<li><code>flex-end</code>: 元素与容器的底部对齐。</li>
<li><code>center</code>: 元素纵向居中。</li>
<li><code>baseline</code>: 元素在容器的基线位置显示。</li>
<li><code>stretch</code>: 元素被拉伸以填满整个容器。</li>
</ul>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><h5 id="当作为一个弹性盒子容器的属性时，浏览器如何在容器的侧轴围绕弹性盒子项目分配空间。"><a href="#当作为一个弹性盒子容器的属性时，浏览器如何在容器的侧轴围绕弹性盒子项目分配空间。" class="headerlink" title="当作为一个弹性盒子容器的属性时，浏览器如何在容器的侧轴围绕弹性盒子项目分配空间。"></a>当作为一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout" target="_blank" rel="external">弹性盒子容器</a>的属性时，浏览器如何在容器的侧轴围绕弹性盒子项目分配空间。</h5><ul>
<li><code>flex-start</code>: 多行都集中在顶部。</li>
<li><code>flex-end</code>: 多行都集中在底部。</li>
<li><code>center</code>: 多行居中。</li>
<li><code>space-between</code>: 行与行之间保持相等距离。</li>
<li><code>space-around</code>: 每行的周围保持相等距离。</li>
<li><code>stretch</code>: 每一行都被拉伸以填满容器。</li>
</ul>
<h3 id="flex-direction-元素在容器里摆放的方向"><a href="#flex-direction-元素在容器里摆放的方向" class="headerlink" title="flex-direction  元素在容器里摆放的方向"></a>flex-direction  元素在容器里摆放的方向</h3><ul>
<li><code>row</code>: 元素摆放的方向和文字方向一致。</li>
<li><code>row-reverse</code>: 元素摆放的方向和文字方向相反。</li>
<li><code>column</code>: 元素从上放到下。</li>
<li><code>column-reverse</code>: 元素从下放到上。</li>
</ul>
<h3 id="flex-wrap-指定元素单行or多行显示"><a href="#flex-wrap-指定元素单行or多行显示" class="headerlink" title="flex-wrap 指定元素单行or多行显示"></a>flex-wrap 指定元素单行or多行显示</h3><ul>
<li><code>nowrap</code>: 所有的元素都在一行。</li>
<li><code>wrap</code>: 元素自动换成多行。</li>
<li><code>wrap-reverse</code>: 元素自动换成逆序的多行。</li>
</ul>
<h3 id="flex-flow-上面两个属性的缩写，接受两个属性的值，以空格隔开"><a href="#flex-flow-上面两个属性的缩写，接受两个属性的值，以空格隔开" class="headerlink" title="flex-flow 上面两个属性的缩写，接受两个属性的值，以空格隔开"></a>flex-flow 上面两个属性的缩写，接受两个属性的值，以空格隔开</h3><ul>
<li>例：<code>flex-flow: row wrap</code> </li>
</ul>
<h3 id="order-调整元素的顺序，默认值为0"><a href="#order-调整元素的顺序，默认值为0" class="headerlink" title="order 调整元素的顺序，默认值为0"></a>order 调整元素的顺序，默认值为0</h3>]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> flex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端页面元素垂直居中兼容性问题]]></title>
      <url>https://achingsoul.github.io/2017/09/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>由于在做网易云音乐播放器时，专辑封面模块在PC端及安卓端都可以绝对定位居中，唯独iOS无法居中。故解决问题后，整理以下移动端垂直居中兼容性问题。</p>
<h2 id="1-绝对定位"><a href="#1-绝对定位" class="headerlink" title="1. 绝对定位"></a>1. 绝对定位</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.disc-container</span> <span class="selector-class">.cover</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">margin</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-使用-transform-实现"><a href="#2-使用-transform-实现" class="headerlink" title="2. 使用 transform 实现"></a>2. 使用 transform 实现</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.disc-container</span> <span class="selector-class">.cover</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-vertical-align-middle"><a href="#3-vertical-align-middle" class="headerlink" title="3. vertical-align: middle"></a>3. vertical-align: middle</h2><p>实现方法：利用空元素占位实现</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box_center"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"placeholder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box_center</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box_center</span> <span class="selector-class">.inner</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box_center</span> <span class="selector-class">.placeholder</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 居中 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP缓存]]></title>
      <url>https://achingsoul.github.io/2017/06/19/HTTP%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h1 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h1><p>Cache-Control是一个通用首部字段，定义了一组关于缓存的控制字段，可以使CSS文件不需要下载就可以出现在页面里（优化网页加载速度）。</p>
<p>常用的有以下几个：</p>
<ul>
<li>no-cache： 指定返回的响应在未经服务器检查其是否被修改之前，不能使用。就是说没有经过服务器确认的缓存是被禁止的，但是经过服务器确认未变更的资源可以避免重复下载。</li>
<li>no-store： 这个是简单粗暴地直接禁止浏览器和所有的中继缓存()储存任何版本的返回响应。</li>
<li>public： 响应可以被缓存(默认)。</li>
<li>private： 响应可以由浏览器缓存(用户)，但是不允许任何中继缓存(CDN)进行缓存。</li>
<li>max-age: 指示获取到的响应，从发送请求开始以秒计算，可以重新使用的最长时间间隔。</li>
</ul>
<p>格式类似于：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"Cache-Control" ":" cache-directive</div></pre></td></tr></table></figure>
<p>作为请求首部时，cache-directive 的可选值有：</p>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FkctxGN8VXdie7M8Fbx6U5Bpfi4c" alt="img"></p>
<p>作为响应首部时，cache-directive 的可选值有：</p>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FixnilG9OWm4w4qUNZGKSkYXZ4gu" alt="img"></p>
<p>Cache-Control可以自由组合可选值，比如：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Cache-Control</span>: public, max-age=3600</div></pre></td></tr></table></figure>
<p>它代表着，<strong>同一URL，一个小时（3600秒）内不再发请求</strong> ，即可以节省请求。</p>
<p><strong>重点：缓存是以url为依据的</strong> 。改变url，浏览器就会重新发送请求。</p>
<p>另外，浏览器对于用户发的第一个请求（localhost），默认不缓存。</p>
<h1 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h1><p> Expires的值对应一个GMT（格林尼治时间），比如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mon, 22 Jul 2017 11:12:01 GMT</div></pre></td></tr></table></figure>
<p>表示通过告诉浏览器资源缓存的过期时间，同一URL下，指定日期之前浏览器不再发送请求。</p>
<p>与Cache-Control二选一即可，最好不要共用。</p>
<h1 id="缓存校验字段"><a href="#缓存校验字段" class="headerlink" title="缓存校验字段"></a>缓存校验字段</h1><p>上述的首部字段均能让客户端决定是否向服务器发送请求，比如设置的缓存时间未过期，那么自然直接从本地缓存取数据即可（在chrome下表现为200 from cache），若缓存时间过期了或资源不该直接走缓存，则会发请求到服务器去。<br>我们现在要说的问题是，如果客户端向服务器发了请求，那么是否意味着一定要读取回该资源的整个实体内容呢？</p>
<h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last Modified"></a>Last Modified</h3><p>服务器将资源传递给客户端时，会将资源最后更改的时间以“Last-Modified: GMT”的形式加在实体首部上一起返回给客户端。</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Last-Modified</span>: Fri, 22 Jul 2016 01:47:00 GMT</div></pre></td></tr></table></figure>
<p>如果一个响应有一个Last Modified请求头，那么这个文件就是鼓励缓存的，使用一个启发式的过期时间，但是这个过期时间也是有期限的，最多过期时间不能超过10%。</p>
<p>即Last Modified不会发送请求，并且过期时间需要浏览器自行计算。</p>
<h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h3><p>为了解决上述Last-Modified可能存在的不准确的问题，Http1.1还推出了 <strong>ETag 实体首部</strong>字段。 服务器会通过某种算法，给资源计算得出一个唯一标志符（比如md5标志），在把资源响应给客户端的时候，会在实体首部加上“ETag: 唯一标识符”一起返回给客户端。例如：</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Etag</span>: "5d8c72a5edda8d6a:3239"</div></pre></td></tr></table></figure>
<p>可以通过md5检测字符串是否相同：</p>
<ol>
<li>下载检测</li>
<li>储存密码（现在不用了）</li>
</ol>
<p><strong>Cache-Control 与 Etag 区别：</strong> </p>
<blockquote>
<p>Cache-Contorl 节省请求的时间，缓存之后不再发请求</p>
<p>ETag 节省下载的时间</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> HTTP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[this是什么]]></title>
      <url>https://achingsoul.github.io/2017/05/18/this%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<h2 id="最简洁的定义"><a href="#最简洁的定义" class="headerlink" title="最简洁的定义"></a>最简洁的定义</h2><p>this就是function.prototype.call()的第一个参数</p>
<h2 id="确定this是什么的三个方法"><a href="#确定this是什么的三个方法" class="headerlink" title="确定this是什么的三个方法"></a>确定this是什么的三个方法</h2><ol>
<li><p>console.log(this)</p>
<blockquote>
<p>在函数里面console.log(this) </p>
</blockquote>
</li>
<li><p>source code, look for .call</p>
<blockquote>
<p>查看源代码 如果是浏览器提供的API就看浏览器的源代码 </p>
</blockquote>
</li>
<li><p>API documentation</p>
<blockquote>
<p>查看 mdn 文档 EventTarget.addEventListener()</p>
<p><em>定义：this 的值是触发事件元素的引用</em> </p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用原生JS实现事件委托]]></title>
      <url>https://achingsoul.github.io/2017/04/20/%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<h2 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h2><p>事件的三个特点：</p>
<ol>
<li>小A订阅/关注/监听了XXX</li>
<li>XXX 发生了变化</li>
<li>小 A 得到了通知</li>
</ol>
<h2 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h2><p>概述：代码<strong>监听</strong>了用户，用户产生了<strong>变化</strong>，那么代码就会得到<strong>通知</strong> ，然后做出反应。</p>
<h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><ol>
<li><p>DOM level0 事件：<code>button.onclick = function(){}</code></p>
<ul>
<li><p>在html元素中添加on+事件的属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button onclick=<span class="string">"alert('hello world')"</span>&gt; click me &lt;<span class="regexp">/button&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在 JavaScript 中绑定事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'hello world'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在W3C出现之前的事件都是 level0事件，可以通过以上两种方式进行监听。但是这个方法只能监听一个事件，第二次监听就会覆盖前一个。</p>
</li>
<li><p>DOM level2 事件：<code>button.addEventListener(&#39;click&#39;, function(){})</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'hello world'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>level2理论上可以实现多重监听，不会覆盖前面的监听事件。</p>
</li>
</ol>
<h3 id="事件派发-amp-事件捕获与冒泡"><a href="#事件派发-amp-事件捕获与冒泡" class="headerlink" title="事件派发&amp;事件捕获与冒泡"></a>事件派发&amp;事件捕获与冒泡</h3><p>W3C对DOM事件派发过程的图解：</p>
<p><img src="http://pij.robinqu.me/Browser_Scripting/DOM_Scripting/eventflow.png" alt=""></p>
<p>事件派发的过程，本身有三个阶段：</p>
<ol>
<li><p>捕获阶段(capture phase)：当事件触发时先通知parent，再通知child。</p>
</li>
<li><p>目标阶段(target phase)：当到达目标元素之后，执行目标元素该事件相应的处理函数。</p>
</li>
<li><p>冒泡阶段(bubble phase)：当事件触发时，先通知child，再通知parent。</p>
<p>当时， 网景主张捕获方式，微软主张冒泡方式。后来 W3C 采用折中的方式，制定了统一的标准——<strong>先捕获再冒泡</strong>。 </p>
<p>addEventListener的第三个参数就是为冒泡和捕获准备的.<br>addEventListener有三个参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.addEventListener(event, <span class="function"><span class="keyword">function</span>, <span class="title">useCapture</span>)</span></div></pre></td></tr></table></figure>
<p>第一个参数是需要绑定的事件<br>第二个参数是触发事件后要执行的函数<br>第三个参数默认值是false，表示在事件冒泡阶段调用事件处理函数；如果参数为true，则表示在事件捕获阶段调用处理函数。</p>
<blockquote>
<p>两种阶段：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; button.addEventListener(<span class="string">'click'</span>, fn, <span class="literal">true</span>) <span class="comment">// 永远别用 ：从上往下通知</span></div><div class="line">&gt; button.addEventListener(<span class="string">'click'</span>, fn) <span class="comment">// 不加第三个参数或者false ：从下往上通知</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>​</p>
<p><img src="https://ooo.0o0.ooo/2017/04/20/58f8965e1696d.jpg" alt=""></p>
</li>
</ol>
<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><h4 id="1-e-target-和-e-currentTarget"><a href="#1-e-target-和-e-currentTarget" class="headerlink" title="1. e.target 和 e.currentTarget"></a>1. e.target 和 e.currentTarget</h4><p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent1"</span> <span class="attr">style</span>=<span class="string">"padding:20px; background:green;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child1"</span> <span class="attr">style</span>=<span class="string">"height:100px; background:red;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      parent1.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'e.target'</span>)</div><div class="line">        <span class="built_in">console</span>.log(e.target)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'e.currentTarget'</span>)</div><div class="line">        <span class="built_in">console</span>.log(e.currentTarget)</div><div class="line">      &#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/04/20/58f8af86b154a.png" alt=""></p>
<p>这段代码为<code>&lt;div id=&quot;parent1&quot;&gt;</code>绑定了一个监听器，当 <code>&lt;div id=&quot;parent1&quot;&gt;</code>上发生点击事件时，分别输出e.target 和 e.currentTarget 的值。</p>
<p>当我们点击图中红色方块时，控制台输出结果如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/04/20/58f8b1a99aa01.png" alt=""></p>
<p>由此可知，e.target 表示点击的元素，e.currentTarget 表示监听的元素。</p>
<p>从点击的元素一直找到 currentTarget 元素，能找到想委托的元素，就触发事件，找不到就不触发</p>
<p><strong>事件委托</strong>就是利用冒泡的原理，把事件加到父元素上，触发执行效果。 </p>
<h4 id="2-事件委托举例"><a href="#2-事件委托举例" class="headerlink" title="2. 事件委托举例"></a>2. 事件委托举例</h4><p>基于以上理论，当针对多个li元素进行监听时，使用传统的事件委托就显得比较麻烦。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"a"</span> &gt;</span>选项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"b"</span> &gt;</span>选项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"c"</span> &gt;</span>选项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">"a"</span>);</div><div class="line">  <span class="keyword">var</span> b = <span class="built_in">document</span>.getElementById(<span class="string">"b"</span>);</div><div class="line">  <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"c"</span>);</div><div class="line"></div><div class="line">  a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</div><div class="line">  &#125;</div><div class="line">  b.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</div><div class="line">  &#125;</div><div class="line">  c.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"c"</span>);</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上只是监听3个li元素，如果监听100个甚至更多呢？或者当我们动态增加或减少li元素时，这种方法就显得难以满足需求了。</p>
<p>下面我们利用冒泡原理，将事件绑定在父元素ul上。以此来<strong>减少监听器</strong>。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>)</div><div class="line">ul.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> el = e.target</div><div class="line"><span class="keyword">while</span>(el.tagName !== <span class="string">'LI'</span>)&#123;</div><div class="line">  el = el.parentNode</div><div class="line">  <span class="keyword">if</span>(el === ul)&#123;</div><div class="line">        el = <span class="literal">null</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125; <span class="comment">//ul的子元素在找到ul时就不需要再找了 循环终止</span></div><div class="line">&#125;</div><div class="line">  <span class="keyword">if</span>(el)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'你点击了 ul 里的 li'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这就是简单的JavaScript事件委托。</p>
<h4 id="3-动态事件委托举例"><a href="#3-动态事件委托举例" class="headerlink" title="3. 动态事件委托举例"></a>3. 动态事件委托举例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"addButton"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">addButton.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</div><div class="line">  li.textContent = <span class="string">'new'</span></div><div class="line">  </div><div class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>).appendChild(li)</div><div class="line">&#125;</div><div class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e.target)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/04/20/58f8cc3832a6c.png" alt=""></p>
<p>控制台运行结果如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/04/20/58f8cc3835b88.png" alt=""></p>
<p>如果不用事件委托只能监听前4个列表，使用事件委托则可以监听新增的new列表，实现<strong>监听动态内容</strong>。  </p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文记录个人学习原生JS实现事件委托的基本方法，通过基本的例子我们可以了解事件委托的原理，然而遇到具体事件还是需要具体分析。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事件委托 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM的增删改查基本操作]]></title>
      <url>https://achingsoul.github.io/2017/04/16/DOM%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="一、什么是DOM"><a href="#一、什么是DOM" class="headerlink" title="一、什么是DOM"></a>一、什么是DOM</h3><p>摘自MDN：</p>
<blockquote>
<p>文档对象模型 (DOM) 是 HTML 和 XML 文档的编程接口。它给文档（结构树）提供了一个结构化的表述并且定义了一种方式—程序可以对结构树进行访问，以改变文档的结构，样式和内容。 DOM 提供了一种表述形式— 将文档作为一个结构化的节点组以及包含属性和方法的对象。从本质上说，它将 web 页面和脚本或编程语言连接起来了。</p>
</blockquote>
<h3 id="二、关于节点"><a href="#二、关于节点" class="headerlink" title="二、关于节点"></a>二、关于节点</h3><p>DOM中有许多不同类型的节点。其中最重要的有三种：<em>元素节点（element node）</em>，<em>文本节点（text node）</em>和<em>属性节点（attribute node）</em>。</p>
<p>例1：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM的增删改查基本操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>什么节点<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"摘自MDN"</span>&gt;</span>balabala<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"节点"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>元素节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>文本节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span>属性节点<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-元素节点"><a href="#1-元素节点" class="headerlink" title="1. 元素节点"></a>1. 元素节点</h4><p>DOM的原子是<em>元素节点（element node）</em>，标签的名字就是元素的名字。</p>
<p>在例1中，诸如 body、p、ul 之类的元素就是元素节点。</p>
<p>而html是唯一没有包含在其他元素里的唯一元素，它是根元素。</p>
<h4 id="2-文本节点"><a href="#2-文本节点" class="headerlink" title="2. 文本节点"></a>2. 文本节点</h4><p>在例1中，<code>&lt;p&gt;</code>元素包含着的文本“balabala”。它就是一个<em>文本节点（text node）</em>。</p>
<h4 id="3-属性节点"><a href="#3-属性节点" class="headerlink" title="3. 属性节点"></a>3. 属性节点</h4><p>属性节点用来对元素做出更具体的描述。</p>
<p>在例1中，<code>&lt;p title=&quot;摘自MDN&quot;&gt;balabala&lt;/p&gt;</code>  p元素中包含了一个 title 属性，这个属性对包含在元素里的东西进行了描述。</p>
<p>在DOM中，<code>title=&quot;摘自MDN&quot;</code>  是一个<em>属性节点（attribute node）</em>。属性节点总是被包含在元素节点中。并非所有的元素都包含属性，但所有的属性都被元素包含。</p>
<h3 id="三、DOM基本操作（增删改查）"><a href="#三、DOM基本操作（增删改查）" class="headerlink" title="三、DOM基本操作（增删改查）"></a>三、DOM基本操作（增删改查）</h3><h4 id="1-增加元素"><a href="#1-增加元素" class="headerlink" title="1. 增加元素"></a>1. 增加元素</h4><ul>
<li><p>document.createElement() </p>
<p>创建HTML元素</p>
</li>
<li><p>document.createTextNode()</p>
<p>创建文本节点</p>
</li>
<li><p>document.createAttribute()</p>
<p>创建属性节点</p>
</li>
</ul>
<ul>
<li><p>document.write()</p>
<p>写入HTML输出流</p>
</li>
<li><p>document.getElementById(<em>id</em>).onclick = function(){<em>code</em>}</p>
<p>将处理事件的程序代码添加到onclick事件</p>
</li>
<li><p>document.createDocumentFragment()</p>
<p>创建一个新的空的文档片段</p>
</li>
<li><p>element.insertBefore()</p>
<p>添加一个节点到一个参照节点之前</p>
</li>
<li><p>document.appendChild()</p>
<p>将指定的节点添加为调用该方法的节点的最后一个子元素</p>
</li>
</ul>
<h4 id="2-修改元素"><a href="#2-修改元素" class="headerlink" title="2. 修改元素"></a>2. 修改元素</h4><ul>
<li><p>element.innerHTML()</p>
<p>获取或替换HTML元素内容</p>
</li>
<li><p>element.setAttribute(attribute, value)</p>
<p>修改属性节点</p>
</li>
<li><p>document.replaceChild()</p>
<p>使用一个节点替换另一个节点</p>
</li>
<li><p>document.getElementById(<em>id</em>).innerHTML = <em>new HTML</em></p>
<p>更改 HTML 元素的内容</p>
</li>
<li><p>document.getElementById(<em>id</em>).attribute = <em>new value</em></p>
<p>更改HTML元素属性的值</p>
</li>
<li><p>document.getElementById(<em>id</em>).style.property = <em>new style</em> </p>
<p>更改HTML元素的样式</p>
</li>
<li><p>node.nodeValue()</p>
<p>改变文本节点的值</p>
</li>
</ul>
<h4 id="3-查询元素"><a href="#3-查询元素" class="headerlink" title="3. 查询元素"></a>3. 查询元素</h4><ul>
<li><p>document.getElementById()</p>
<p>返回与给定 id 属性值的节点对应的对象</p>
</li>
<li><p>document.getElementsByTagName()</p>
<p>返回一个对象数组，每个对象对应着标签的一个元素</p>
</li>
<li><p>document.getElementsByClassName()</p>
<p>返回指定相同类名的元素的数组</p>
</li>
<li><p>document.getAttribute()</p>
<p>查询属性节点</p>
</li>
<li><p>document.querySelector()</p>
<p>通过CSS选择器来查找元素。返回第一个匹配的元素，如果没有匹配的元素，则返回null</p>
</li>
<li><p>document.querySelectorAll()</p>
<p>通过CSS选择器来查找元素。返回的是所有匹配的元素，而且可以匹配多个选择符</p>
</li>
</ul>
<h4 id="4-删除元素"><a href="#4-删除元素" class="headerlink" title="4. 删除元素"></a>4. 删除元素</h4><ul>
<li><p>document.removeChild()</p>
<p>删除子节点</p>
</li>
</ul>
<p>​</p>
<hr>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul>
<li>《JavaScript DOM编程艺术》</li>
<li><a href="https://www.w3schools.com/js/js_htmldom_methods.asp" target="_blank" rel="external">JS HTML DOM</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的第一个响应式页面]]></title>
      <url>https://achingsoul.github.io/2017/03/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%93%8D%E5%BA%94%E5%BC%8F%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>摘自维基百科：</p>
<blockquote>
<p><strong>响应式网页设计</strong>（英语：Responsive web design，通常缩写为<strong>RWD</strong>），或称自适应网页设计、回应式网页设计、对应式网页设计。 是一种网页设计的技术做法，该设计可使网站在不同的设备（从桌面电脑显示器到移动电话或其他移动产品设备）上浏览时对应不同分辨率皆有适合的呈现，减少用户进行缩放、平移和滚动等操作行为。对于网站设计师和前端工程师来说，有别于过去需要针对各种设备进行不同的设计，使用此种设计方式将更易于维护网页。此概念于2010年5月由国外著名网页设计师Ethan Marcotte所提出。</p>
</blockquote>
<h3 id="二、响应式页面的诞生"><a href="#二、响应式页面的诞生" class="headerlink" title="二、响应式页面的诞生"></a>二、响应式页面的诞生</h3><ol>
<li>设计师给出 PC 设计稿和手机设计稿</li>
<li>前端开发者根据两套设计稿写代码</li>
</ol>
<h3 id="三、编写响应式页面"><a href="#三、编写响应式页面" class="headerlink" title="三、编写响应式页面"></a>三、编写响应式页面</h3><h4 id="1-正交原则"><a href="#1-正交原则" class="headerlink" title="1.正交原则"></a>1.正交原则</h4><p>写 HTML 的时候不考虑 CSS，写 CSS 的时候尽量不要改 HTML，避免逻辑混乱、代码混乱。</p>
<h4 id="2-分模块"><a href="#2-分模块" class="headerlink" title="2.分模块"></a>2.分模块</h4><p>例如CSS中：</p>
<ol>
<li>分模块</li>
<li>把选择器列出</li>
<li>选样式</li>
</ol>
<h4 id="3-尽量不要写「死」宽高"><a href="#3-尽量不要写「死」宽高" class="headerlink" title="3.尽量不要写「死」宽高"></a>3.尽量不要写「死」宽高</h4><p>HTML标签默认自适应，块级元素宽度的默认值就是100%，高度有文档流内的子元素的高度决定。（写死就没有响应式）</p>
<ul>
<li>高度：块级元素可以用<code>padding</code>、<code>line-height</code>来达到预想效果。</li>
</ul>
<ul>
<li>宽度：内联元素使用<code>mix-width</code>，块级元素使用<code>max-width</code>设置。</li>
</ul>
<h4 id="4-优先编写移动端页面"><a href="#4-优先编写移动端页面" class="headerlink" title="4.优先编写移动端页面"></a>4.优先编写移动端页面</h4><p>在我的理解，当下大部分数据流量都来源于移动端，所以优先实现移动端页面，然后再编写其他媒体设备页面。</p>
<h4 id="5-使用CSS媒体查询（Media-Queries）"><a href="#5-使用CSS媒体查询（Media-Queries）" class="headerlink" title="5.使用CSS媒体查询（Media Queries）"></a>5.使用CSS媒体查询<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="external">（Media Queries）</a></h4><p>通过使用<code>@media (判断条件){}</code>来使得在检测不同设备分辨率时，对同一个元素渲染不同的CSS。所以，所有设备的CSS其实可以在同一个文件里，但会根据不同设备来让不同CSS展现出来。</p>
<h4 id="6-使用开发者工具"><a href="#6-使用开发者工具" class="headerlink" title="6.使用开发者工具"></a>6.使用开发者工具</h4><p>利用开发者工具，观察编写CSS时相应的元素状态，再根据需求更改。</p>
<h3 id="四、一个简单的响应式页面"><a href="#四、一个简单的响应式页面" class="headerlink" title="四、一个简单的响应式页面"></a>四、一个简单的响应式页面</h3><p>这是我的第一个简单的响应式页面，兼容<code>PC/PC HD/Mobile/Pad</code>模式。</p>
<p>这个页面还需要完善，关于编写响应式的技巧后续也还会补充。</p>
<p>代码地址：<a href="https://github.com/achingsoul/simple-page/tree/master/Desktop/simple-page" target="_blank" rel="external">https://github.com/achingsoul/simple-page/tree/master/Desktop/simple-page</a></p>
<p>预览地址：<a href="https://achingsoul.github.io/simple-page/Desktop/simple-page/index.html">https://achingsoul.github.io/simple-page/Desktop/simple-page/index.html</a></p>
<h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><ol>
<li>要先理解整体页面各模块需求，才能更好的进行编写。</li>
<li>下一步要对响应式页面中遇到的居中问题进行梳理。</li>
<li>关于flexbox布局要多加练习。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 响应式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML中的meta元素]]></title>
      <url>https://achingsoul.github.io/2017/03/26/HTML%E4%B8%AD%E7%9A%84meta%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>HTML中的meta元素表示那些不能由其它HTML元相关元素，如title，base，link，style和scipt元素之一表示的任何元数据信息。详情参考<a href="https://www.w3.org/TR/html5/document-metadata.html#the-meta-element" target="_blank" rel="external">4.2 Document metadata – HTML5</a>。</p>
<h3 id="二、属性"><a href="#二、属性" class="headerlink" title="二、属性"></a>二、属性</h3><h4 id="1-name属性"><a href="#1-name属性" class="headerlink" title="1.name属性"></a>1.name属性</h4><p>name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p>
<p>meta标签的name属性语法格式是：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"参数"</span> <span class="attr">content</span>=<span class="string">"具体的参数值"</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>页面关键字</strong></p>
<p>每个网页应具有描述该网页内容的一组唯一的关键字。<br>使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"壁纸 音乐 电影 吉他"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>页面描述</strong></p>
<p>页面描述，每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"网站描述"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>搜索引擎索引方式</strong></p>
<p>有时候会有一些站点内容，不希望被ROBOTS抓取而公开。为了解决这个问题，ROBOTS开发界提供了两个办法：一个是robots.txt，另一个是The Robots META标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Robots"</span> <span class="attr">contect</span>=<span class="string">"all|none|index|noindex|follow|nofollow"</span>&gt;</span>  </div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">默认是all其中的属性说明如下： </div><div class="line">设定为all：文件将被检索，且页面上的链接可以被查询； </div><div class="line">设定为none：文件将不被检索，且页面上的链接不可以被查询； </div><div class="line">设定为index：文件将被检索； </div><div class="line">设定为follow：页面上的链接可以被查询； </div><div class="line">设定为noindex：文件将不被检索，但页面上的链接可以被查询； </div><div class="line">设定为nofollow：文件将不被检索，页面上的链接可以被查询。</div><div class="line">--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>声明作者</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"author name"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>浏览器内核选择</strong></p>
<p>国内浏览器很多都是双内核（webkit和Trident），webkit内核高速浏览，IE内核兼容网页和旧版网站。而添加meta标签的网站可以控制浏览器选择何种内核渲染。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit|ie-comp|ie-stand"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-http-equiv属性"><a href="#2-http-equiv属性" class="headerlink" title="2.http-equiv属性"></a>2.http-equiv属性</h3><p>http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。</p>
<p>meta标签的http-equiv属性语法格式是：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"参数"</span> <span class="attr">content</span>=<span class="string">"参数变量值"</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>优先使用 IE 最新版本和 Chrome</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 关于X-UA-Compatible --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=6"</span> &gt;</span><span class="comment">&lt;!-- 使用IE6 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=7"</span> &gt;</span><span class="comment">&lt;!-- 使用IE7 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=8"</span> &gt;</span><span class="comment">&lt;!-- 使用IE8 --&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>页面重定向和刷新</strong></p>
<p>content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;url="</span> "&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>设定期限</strong></p>
<p>可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Fri,12Jan200118:18:18GMT"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>Pragma(cache模式)</strong></p>
<p>禁止浏览器从本地计算机的缓存中访问页面内容。这样设定，访问者将无法脱机浏览。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>自动刷新并指向新页面</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"2;URL=http://www.xxx.net"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2是指停留2秒钟后自动刷新到URL网址。</p>
</li>
<li><p><strong>Set-Cookie(cookie设定)</strong></p>
<p>如果网页过期，那么存盘的cookie将被删除。<br>用法（必须使用GMT时间格式）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Set-Cookie"</span> <span class="attr">content</span>=<span class="string">"cookievalue=xxx;expires=Friday,12-Jan-200118:18:18GMT; path=/"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>设定显示的语言</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Language"</span> <span class="attr">content</span>=<span class="string">"zh-cn"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-特殊"><a href="#3-特殊" class="headerlink" title="3.特殊"></a>3.特殊</h3><ul>
<li><p><strong>声明编码H5最新写法</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> meta </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符集与字符编码]]></title>
      <url>https://achingsoul.github.io/2017/03/26/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>学习之初，对字符编码概念及原理不够理解，本文用于整理记录关于字符编码的知识。</p>
<h3 id="二、基础概念"><a href="#二、基础概念" class="headerlink" title="二、基础概念"></a>二、基础概念</h3><p>要弄清字符编码，首先需要知道什么是字符集。从名字来知道字符集就是所有字符构成的集合。<br>以下摘自维基百科：</p>
<blockquote>
<p><strong>字符</strong>是各种文字和符号的总称，包括各个国家文字、标点符号、图形符号、数字等等。<br><strong>字符集</strong>是多个字符的集合。字符集种类很多，常见的字符集有：ASCII、GBK、Unicode、BIG5等<br><strong>字符编码</strong>（英语：Character encoding）也称字集码，是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。</p>
</blockquote>
<h3 id="三、常见的字符编码"><a href="#三、常见的字符编码" class="headerlink" title="三、常见的字符编码"></a>三、常见的字符编码</h3><h4 id="1-ASCII"><a href="#1-ASCII" class="headerlink" title="1.ASCII"></a>1.ASCII</h4><p>计算机最早由老外发明，因此最早的ASCII编码只考虑到了英文字母的表示，</p>
<ul>
<li>字符集：英文字母、数字、标点、控制字符（回车，制表符等）</li>
<li>编码集：由于这些字符数量有限，它的编码集也很小，只需要0-127的整数就可以表示</li>
<li>编码方案：存储这些编码也很简单，只需要一个字节，即将字符的编码直接转化为一个字节的二进制数据即可<br>比如字符A的编码值为65，二进制存储为01000001<h4 id="2-GBK"><a href="#2-GBK" class="headerlink" title="2.GBK"></a>2.GBK</h4>中文博大精深，中文字符也远远多于英文字符，这样长度只有一个字节的ascii编码就无法表示数量庞大的中文字符，于是就有了gb系列的编码，其中gbk是gb系列编码的扩展</li>
<li>字符集：ascii字符＋中文</li>
<li>编码集：每个字符用两个字节表示，编码集为0-65535（没有完全覆盖），理论上最多可以表示65536个字符，这可以表示绝大多数汉字</li>
<li>编码方案：ascii字符保持不变，用一个字节表示，中文字符用两个字节表示，第一字节的范围是81–FE，第二字节的一部分领域在40–7E，其他领域在80–FE<br>比如“中”编码值为54992，十六进制为0xD6D0。GBK兼容ascii编码，事实上所有编码都兼容ascii编码。另外微软的CP936编码被视为等同于GBK<h4 id="3-Unicode"><a href="#3-Unicode" class="headerlink" title="3.Unicode"></a>3.Unicode</h4>中文的编码是解决了，但是其它语言的编码怎么办呢，总不能每个国家都搞一套编码方案吧，而且在互联网时代，很多信息都是共享的，于是需要一种能表示所有字符的编码方案，Unicode就是这样的</li>
<li>字符集：所有语言的所有字符</li>
<li>编码集：unicode是一个很大的集合，可以表示100多万个符号，最长可用4个字节表示一个符号</li>
<li>编码方案：unicode只是规定了每个符号的二进制表示，并没有规定如何存储<br>比如“中”的Unicode编码为十六进制0x4E2D，需要用两个字节来表示，有些字符可能需要3个甚至4个字节来表示，如果都采用定长编码，就会造成存储空间的极大浪费，因为我们知道英文字符只需要一个字节就能表示，于是便有了对Unicode的不同实现方案，目前最广泛使用的就是UTF-8<h4 id="4-UTF-8"><a href="#4-UTF-8" class="headerlink" title="4.UTF-8"></a>4.UTF-8</h4>UTF-8是对Unicode的一种实现方案，是一种可变长字符编码，也就是说它先基于Unicode编码将字符表示成一个二进制，然后采用一种方式去存储这串二进制，它的规则也很简单</li>
<li><p>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的Unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的</p>
</li>
<li><p>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的Unicode码<br>具体编码规则如下</p>
<p><img src="http://i2.buimg.com/1949/351e41a4022bd2b6.png" alt="Markdown"></p>
</li>
</ul>
<p>举个例子，字符A的Unicode值为01000001，其UTF-8编码仍旧为01000001，汉字“中”的Unicode编码为0x4E2D(01001110 00101101)，在第三行的范围内，需要用三个字节表示，其UTF-8编码值格式为1110xxxx 10xxxxxx 10xxxxxx，其中x为从最右边开始填入的unicode编码二进制，不够的补0，得到11100100 10111000 10101101</p>
<p>UTF-8有两个主要优点，第一是变长编码，在能表示足够大的字符集的前提下减少了存储空间，第二是采用前缀编码，即任何一个字符的编码都不是另一个字符编码的前缀，这样的好处是在网络传输过程中如果丢失了一个字节，可以判断出这个字节所在字符的编码边界，只会影响这个字符的显示，而不会影响其后面的字符，这不同于GBK这种非前缀编码，GBK每个汉字用两个字节编码，如果丢失一个字节，剩下的一个字节和后面字符的第一个字节可以组成一个新的字符，这样后续的所有字符都错乱了。</p>
]]></content>
      
        <categories>
            
            <category> HTTP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 字符集 </tag>
            
            <tag> 字符编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何使用 GitHub Pages 预览页面]]></title>
      <url>https://achingsoul.github.io/2017/03/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-GitHub-Pages-%E9%A2%84%E8%A7%88%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<p>为了能预览GitHub上的页面，GitHub推出了 GitHub Pages 功能，以下是设置GitHub Pages的步骤： </p>
<h2 id="1-登入GitHub，点击New-repository"><a href="#1-登入GitHub，点击New-repository" class="headerlink" title="1.登入GitHub，点击New repository"></a>1.登入GitHub，点击New repository</h2><p><img src="http://upload-images.jianshu.io/upload_images/4730821-71a348b1fde9f019.png?imageMogr2/auto-orient/strip" alt=""></p>
<h2 id="2-点击Create-repository"><a href="#2-点击Create-repository" class="headerlink" title="2.点击Create repository"></a>2.点击Create repository</h2><p><img src="http://upload-images.jianshu.io/upload_images/4730821-5ce8e7d51934b1bb.png?imageMogr2/auto-orient/strip" alt=""></p>
<h2 id="3-进入「settings」页面："><a href="#3-进入「settings」页面：" class="headerlink" title="3.进入「settings」页面："></a>3.进入「settings」页面：</h2><p><img src="http://upload-images.jianshu.io/upload_images/4730821-fef2cb519964845f.png?imageMogr2/auto-orient/strip" alt=""></p>
<h2 id="4-开启-GitHub-Pages-功能，得到一个「预览地址」，我的「预览地址」是-https-achingsoul-github-io-demos"><a href="#4-开启-GitHub-Pages-功能，得到一个「预览地址」，我的「预览地址」是-https-achingsoul-github-io-demos" class="headerlink" title="4.开启 GitHub Pages 功能，得到一个「预览地址」，我的「预览地址」是 https://achingsoul.github.io/demos/"></a>4.开启 GitHub Pages 功能，得到一个「预览地址」，我的「预览地址」是 <a href="https://achingsoul.github.io/demos/">https://achingsoul.github.io/demos/</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/4730821-fef2cb519964845f.png?imageMogr2/auto-orient/strip" alt=""></p>
<h2 id="5-以后你就用这个「预览地址」来预览你的-html，比如你的-html-路径是-demos-test-html，那么预览链接就是："><a href="#5-以后你就用这个「预览地址」来预览你的-html，比如你的-html-路径是-demos-test-html，那么预览链接就是：" class="headerlink" title="5.以后你就用这个「预览地址」来预览你的 html，比如你的 html 路径是 demos/test.html，那么预览链接就是："></a>5.以后你就用这个「预览地址」来预览你的 html，比如你的 html 路径是 demos/test.html，那么预览链接就是：</h2><p><a href="https://achingsoul.github.io/demos/test.html">https://achingsoul.github.io/demos/test.html</a></p>
<h3 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h3><ul>
<li>新建test.html</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4730821-4760c096c4f82d90.png?imageMogr2/auto-orient/strip" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4730821-916810aeedd24fc5.png?imageMogr2/auto-orient/strip" alt=""></p>
<ul>
<li>在浏览器输入<a href="https://achingsoul.github.io/demos/test.html">https://achingsoul.github.io/demos/test.html</a></li>
</ul>
<p>这样，你就能自己随时预览 GitHub 里的页面了！</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
